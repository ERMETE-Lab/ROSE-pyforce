{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Offline Phase: SGREEDY algorithm for sensor placement\n",
    "\n",
    "This notebook implements the following algorithm for sensor placement:\n",
    "\n",
    "- Stabilised GREEDY algorithm (SGREEDY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "from IPython.display import clear_output\n",
    "import pickle\n",
    "\n",
    "import gmsh\n",
    "from mpi4py import MPI\n",
    "from dolfinx.io.gmshio import model_to_mesh\n",
    "from dolfinx.fem import FunctionSpace\n",
    "\n",
    "from pyforce.tools.write_read import ImportH5, StoreFunctionsList as store\n",
    "from pyforce.tools.functions_list import FunctionsList\n",
    "from pyforce.offline.sensors import SGREEDY\n",
    "\n",
    "path_off ='./Offline_results/'"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The geometry is imported from \"ANL11A2_octave.geo\", generated with GMSH. Then, the mesh is created with the gmsh module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdim = 2\n",
    "\n",
    "model_rank = 0\n",
    "mesh_comm = MPI.COMM_WORLD\n",
    "\n",
    "# Initialize the gmsh module\n",
    "gmsh.initialize()\n",
    "\n",
    "# Load the .geo file\n",
    "gmsh.merge('ANL11A2_octave.geo')\n",
    "gmsh.model.geo.synchronize()\n",
    "\n",
    "# Set algorithm (adaptive = 1, Frontal-Delaunay = 6)\n",
    "gmsh.option.setNumber(\"Mesh.Algorithm\", 6)\n",
    "\n",
    "gmsh.model.mesh.generate(gdim)\n",
    "gmsh.model.mesh.optimize(\"Netgen\")\n",
    "\n",
    "# Domain\n",
    "domain, ct, ft = model_to_mesh(gmsh.model, comm = mesh_comm, rank = model_rank, gdim = gdim )\n",
    "gmsh.finalize()\n",
    "\n",
    "fuel1_marker    = 1\n",
    "fuel2_marker    = 2\n",
    "fuel_rod_marker = 3\n",
    "refl_marker     = 4\n",
    "\n",
    "void_marker     = 10\n",
    "sym_marker      = 20\n",
    "\n",
    "tdim = domain.topology.dim\n",
    "fdim = tdim - 1\n",
    "domain.topology.create_connectivity(fdim, tdim)\n",
    "\n",
    "clear_output()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing Snapshots\n",
    "\n",
    "The snapshots are loaded and stored into suitable data structures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining the functional space\n",
    "V = FunctionSpace(domain, (\"Lagrange\", 1))\n",
    "\n",
    "# Define the variables to load\n",
    "var_names = [\n",
    "             'phi_1',\n",
    "             'phi_2'\n",
    "             ]\n",
    "\n",
    "tex_var_names = [\n",
    "                 r'\\phi_1',\n",
    "                 r'\\phi_2'\n",
    "                 ]\n",
    "\n",
    "# Snapshot path\n",
    "path_FOM = './Snapshots/'\n",
    "\n",
    "################ Importing Snapshots ########################\n",
    "test_snaps = list()\n",
    "\n",
    "for field_i in range(len(var_names)):\n",
    "    test_snaps.append(FunctionsList(V))\n",
    "\n",
    "    tmp_FOM_list, _ = ImportH5(V, path_FOM+'test_snap_'+var_names[field_i], var_names[field_i])\n",
    "    \n",
    "    for mu in range(len(tmp_FOM_list)):\n",
    "        test_snaps[field_i].append(tmp_FOM_list(mu))\n",
    "    \n",
    "    del tmp_FOM_list      \n",
    "            \n",
    "test_params = list()\n",
    "for field_i in range(len(var_names)):\n",
    "    with open(path_FOM+'./test.param', 'rb') as f:\n",
    "        test_params.append(pickle.load(f))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us import the POD modes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "bf = dict()\n",
    "\n",
    "for field_i in range(len(var_names)):\n",
    "    \n",
    "    bf[var_names[field_i]] = ImportH5(V, path_off+'/BasisFunctions/basisPOD_'+var_names[field_i], 'POD_'+var_names[field_i])[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SGREEDY for POD basis\n",
    "A greedy procedure is set up to maximise the *inf-sup* constant $\\beta_{N,M}$, for 3 different values if the point spread"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = [0.1, 1., 2.5]\n",
    "sgreedy_pod = dict()\n",
    "\n",
    "for field_i in range(len(var_names)):\n",
    "    sgreedy_pod[var_names[field_i]] = [SGREEDY(domain, bf[var_names[field_i]], V, var_names[field_i], s_jj) for s_jj in s]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the snapshots belong to $H^1\\subset L^2$, the Riesz representation of a functional is sought in this space, endowed with the inner product\n",
    "\\begin{equation*}\n",
    "\\left(u,v\\right)_{H^1}=\\int_\\Omega \\nabla u\\cdot \\nabla v\\,d\\Omega + \\int_\\Omega u\\cdot v\\,d\\Omega\n",
    "\\end{equation*}\n",
    "The results will be compared with the approximation properties of the case with the Riesz representation in $L^2$, whose inner product is \n",
    "\\begin{equation*}\n",
    "\\left(u,v\\right)_{L^2} = \\int_\\Omega u\\cdot v\\,d\\Omega\n",
    "\\end{equation*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.002 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.084779\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.003 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.146526\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.002 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.180025\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.003 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.223101\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.002 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.393625\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.003 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.398683\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.002 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.085134\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.003 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.148458\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.002 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.173819\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.003 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.214982\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.002 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.357794\n",
      "Generating sensors (sampled every 2 cells): 3435.000 / 3435.00 - 0.003 s/it\n",
      "m = 30, n = 10 | beta_n,m = 0.371680\n"
     ]
    }
   ],
   "source": [
    "Nmax = 10\n",
    "Mmax = 30\n",
    "\n",
    "sam_every = 2\n",
    "\n",
    "is_H1 = [False, True]\n",
    "fun_space_label = ['L2', 'H1']\n",
    "\n",
    "for field_i in range(len(var_names)):\n",
    "    for jj in range(len(s)):\n",
    "        for kk in range(len(is_H1)):\n",
    "            \n",
    "            print('SGREEDY for '+var_names[field_i]+' with s={:.2f}'.format(s[jj])+' and Riesz representation in '+fun_space_label[kk])\n",
    "            \n",
    "            sgreedy_pod[var_names[field_i]][jj].generate(Nmax, Mmax, tol = 0.5, sampleEvery = sam_every, verbose=False, is_H1 = is_H1[kk])\n",
    "            store(domain, sgreedy_pod[var_names[field_i]][jj].basis_sens, \n",
    "                  'SGREEDYPOD_' +var_names[field_i]+'_s_{:.2e}'.format(s[jj]),\n",
    "                  path_off+'/BasisSensors/sensorsSGREEDYPOD_' + var_names[field_i]+'_s_{:.2e}_'.format(s[jj])+fun_space_label[kk])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "e5b3af111de828d84cfea01c8e4cc990d7262e947155f31e208c22ad6b78199b"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
